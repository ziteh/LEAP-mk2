
leap-up-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001810  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800191c  0800191c  0001191c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000014  080019c4  080019c4  000119c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080019d8  080019d8  000119d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  080019dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ec  20000080  08001a5c  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000016c  08001a5c  0002016c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000da8a  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b30  00000000  00000000  0002db33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000588  00000000  00000000  0002f668  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d0  00000000  00000000  0002fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002cfb  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000098ab  00000000  00000000  00032dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003c666  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000968c  00000000  00000000  0003c6e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000030  00000000  00000000  00045f60  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000001ed  00000000  00000000  00045d70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08001904 	.word	0x08001904

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08001904 	.word	0x08001904

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800015c:	b480      	push	{r7}
 800015e:	b087      	sub	sp, #28
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000164:	2300      	movs	r3, #0
 8000166:	617b      	str	r3, [r7, #20]
 8000168:	2300      	movs	r3, #0
 800016a:	613b      	str	r3, [r7, #16]
 800016c:	230f      	movs	r3, #15
 800016e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	78db      	ldrb	r3, [r3, #3]
 8000174:	2b00      	cmp	r3, #0
 8000176:	d03a      	beq.n	80001ee <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000178:	4b27      	ldr	r3, [pc, #156]	; (8000218 <NVIC_Init+0xbc>)
 800017a:	68db      	ldr	r3, [r3, #12]
 800017c:	43db      	mvns	r3, r3
 800017e:	0a1b      	lsrs	r3, r3, #8
 8000180:	f003 0307 	and.w	r3, r3, #7
 8000184:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000186:	697b      	ldr	r3, [r7, #20]
 8000188:	f1c3 0304 	rsb	r3, r3, #4
 800018c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800018e:	68fa      	ldr	r2, [r7, #12]
 8000190:	697b      	ldr	r3, [r7, #20]
 8000192:	fa22 f303 	lsr.w	r3, r2, r3
 8000196:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	785b      	ldrb	r3, [r3, #1]
 800019c:	461a      	mov	r2, r3
 800019e:	693b      	ldr	r3, [r7, #16]
 80001a0:	fa02 f303 	lsl.w	r3, r2, r3
 80001a4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	789b      	ldrb	r3, [r3, #2]
 80001aa:	461a      	mov	r2, r3
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	4013      	ands	r3, r2
 80001b0:	697a      	ldr	r2, [r7, #20]
 80001b2:	4313      	orrs	r3, r2
 80001b4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80001b6:	697b      	ldr	r3, [r7, #20]
 80001b8:	011b      	lsls	r3, r3, #4
 80001ba:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001bc:	4a17      	ldr	r2, [pc, #92]	; (800021c <NVIC_Init+0xc0>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	6979      	ldr	r1, [r7, #20]
 80001c4:	b2c9      	uxtb	r1, r1
 80001c6:	4413      	add	r3, r2
 80001c8:	460a      	mov	r2, r1
 80001ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ce:	4a13      	ldr	r2, [pc, #76]	; (800021c <NVIC_Init+0xc0>)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	095b      	lsrs	r3, r3, #5
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	f003 031f 	and.w	r3, r3, #31
 80001e2:	2101      	movs	r1, #1
 80001e4:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001e8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80001ec:	e00f      	b.n	800020e <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ee:	490b      	ldr	r1, [pc, #44]	; (800021c <NVIC_Init+0xc0>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	095b      	lsrs	r3, r3, #5
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	f003 031f 	and.w	r3, r3, #31
 8000202:	2201      	movs	r2, #1
 8000204:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000206:	f100 0320 	add.w	r3, r0, #32
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800020e:	bf00      	nop
 8000210:	371c      	adds	r7, #28
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	e000ed00 	.word	0xe000ed00
 800021c:	e000e100 	.word	0xe000e100

08000220 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800022c:	4b34      	ldr	r3, [pc, #208]	; (8000300 <EXTI_Init+0xe0>)
 800022e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	799b      	ldrb	r3, [r3, #6]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d04f      	beq.n	80002d8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000238:	4931      	ldr	r1, [pc, #196]	; (8000300 <EXTI_Init+0xe0>)
 800023a:	4b31      	ldr	r3, [pc, #196]	; (8000300 <EXTI_Init+0xe0>)
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	43db      	mvns	r3, r3
 8000244:	4013      	ands	r3, r2
 8000246:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000248:	492d      	ldr	r1, [pc, #180]	; (8000300 <EXTI_Init+0xe0>)
 800024a:	4b2d      	ldr	r3, [pc, #180]	; (8000300 <EXTI_Init+0xe0>)
 800024c:	685a      	ldr	r2, [r3, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	43db      	mvns	r3, r3
 8000254:	4013      	ands	r3, r2
 8000256:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	791b      	ldrb	r3, [r3, #4]
 800025c:	461a      	mov	r2, r3
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	4413      	add	r3, r2
 8000262:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	68fa      	ldr	r2, [r7, #12]
 8000268:	6811      	ldr	r1, [r2, #0]
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	6812      	ldr	r2, [r2, #0]
 800026e:	430a      	orrs	r2, r1
 8000270:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000272:	4923      	ldr	r1, [pc, #140]	; (8000300 <EXTI_Init+0xe0>)
 8000274:	4b22      	ldr	r3, [pc, #136]	; (8000300 <EXTI_Init+0xe0>)
 8000276:	689a      	ldr	r2, [r3, #8]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	43db      	mvns	r3, r3
 800027e:	4013      	ands	r3, r2
 8000280:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000282:	491f      	ldr	r1, [pc, #124]	; (8000300 <EXTI_Init+0xe0>)
 8000284:	4b1e      	ldr	r3, [pc, #120]	; (8000300 <EXTI_Init+0xe0>)
 8000286:	68da      	ldr	r2, [r3, #12]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	43db      	mvns	r3, r3
 800028e:	4013      	ands	r3, r2
 8000290:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	795b      	ldrb	r3, [r3, #5]
 8000296:	2b10      	cmp	r3, #16
 8000298:	d10e      	bne.n	80002b8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800029a:	4919      	ldr	r1, [pc, #100]	; (8000300 <EXTI_Init+0xe0>)
 800029c:	4b18      	ldr	r3, [pc, #96]	; (8000300 <EXTI_Init+0xe0>)
 800029e:	689a      	ldr	r2, [r3, #8]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4313      	orrs	r3, r2
 80002a6:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80002a8:	4915      	ldr	r1, [pc, #84]	; (8000300 <EXTI_Init+0xe0>)
 80002aa:	4b15      	ldr	r3, [pc, #84]	; (8000300 <EXTI_Init+0xe0>)
 80002ac:	68da      	ldr	r2, [r3, #12]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4313      	orrs	r3, r2
 80002b4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80002b6:	e01d      	b.n	80002f4 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <EXTI_Init+0xe0>)
 80002ba:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	795b      	ldrb	r3, [r3, #5]
 80002c0:	461a      	mov	r2, r3
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	4413      	add	r3, r2
 80002c6:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	68fa      	ldr	r2, [r7, #12]
 80002cc:	6811      	ldr	r1, [r2, #0]
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	6812      	ldr	r2, [r2, #0]
 80002d2:	430a      	orrs	r2, r1
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	e00d      	b.n	80002f4 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	791b      	ldrb	r3, [r3, #4]
 80002dc:	461a      	mov	r2, r3
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	4413      	add	r3, r2
 80002e2:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	68fa      	ldr	r2, [r7, #12]
 80002e8:	6811      	ldr	r1, [r2, #0]
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	6812      	ldr	r2, [r2, #0]
 80002ee:	43d2      	mvns	r2, r2
 80002f0:	400a      	ands	r2, r1
 80002f2:	601a      	str	r2, [r3, #0]
}
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40010400 	.word	0x40010400

08000304 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800030c:	2300      	movs	r3, #0
 800030e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000310:	2300      	movs	r3, #0
 8000312:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000314:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <EXTI_GetITStatus+0x44>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4013      	ands	r3, r2
 800031c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800031e:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <EXTI_GetITStatus+0x44>)
 8000320:	695a      	ldr	r2, [r3, #20]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4013      	ands	r3, r2
 8000326:	2b00      	cmp	r3, #0
 8000328:	d005      	beq.n	8000336 <EXTI_GetITStatus+0x32>
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d002      	beq.n	8000336 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000330:	2301      	movs	r3, #1
 8000332:	73fb      	strb	r3, [r7, #15]
 8000334:	e001      	b.n	800033a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000336:	2300      	movs	r3, #0
 8000338:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800033a:	7bfb      	ldrb	r3, [r7, #15]
}
 800033c:	4618      	mov	r0, r3
 800033e:	3714      	adds	r7, #20
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40010400 	.word	0x40010400

0800034c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <EXTI_ClearITPendingBit+0x18>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	6153      	str	r3, [r2, #20]
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	40010400 	.word	0x40010400

08000368 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000368:	b480      	push	{r7}
 800036a:	b089      	sub	sp, #36	; 0x24
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000372:	2300      	movs	r3, #0
 8000374:	61fb      	str	r3, [r7, #28]
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
 8000386:	2300      	movs	r3, #0
 8000388:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	78db      	ldrb	r3, [r3, #3]
 800038e:	f003 030f 	and.w	r3, r3, #15
 8000392:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	78db      	ldrb	r3, [r3, #3]
 8000398:	f003 0310 	and.w	r3, r3, #16
 800039c:	2b00      	cmp	r3, #0
 800039e:	d005      	beq.n	80003ac <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	789b      	ldrb	r3, [r3, #2]
 80003a4:	461a      	mov	r2, r3
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	4313      	orrs	r3, r2
 80003aa:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d044      	beq.n	8000440 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
 80003c0:	e038      	b.n	8000434 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80003c2:	2201      	movs	r2, #1
 80003c4:	69bb      	ldr	r3, [r7, #24]
 80003c6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ca:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	461a      	mov	r2, r3
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	4013      	ands	r3, r2
 80003d6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80003d8:	693a      	ldr	r2, [r7, #16]
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d126      	bne.n	800042e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80003e0:	69bb      	ldr	r3, [r7, #24]
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003e6:	220f      	movs	r2, #15
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	fa02 f303 	lsl.w	r3, r2, r3
 80003ee:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	43db      	mvns	r3, r3
 80003f4:	697a      	ldr	r2, [r7, #20]
 80003f6:	4013      	ands	r3, r2
 80003f8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003fa:	69fa      	ldr	r2, [r7, #28]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	4313      	orrs	r3, r2
 8000406:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	78db      	ldrb	r3, [r3, #3]
 800040c:	2b28      	cmp	r3, #40	; 0x28
 800040e:	d105      	bne.n	800041c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000410:	2201      	movs	r2, #1
 8000412:	69bb      	ldr	r3, [r7, #24]
 8000414:	409a      	lsls	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	615a      	str	r2, [r3, #20]
 800041a:	e008      	b.n	800042e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	78db      	ldrb	r3, [r3, #3]
 8000420:	2b48      	cmp	r3, #72	; 0x48
 8000422:	d104      	bne.n	800042e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000424:	2201      	movs	r2, #1
 8000426:	69bb      	ldr	r3, [r7, #24]
 8000428:	409a      	lsls	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800042e:	69bb      	ldr	r3, [r7, #24]
 8000430:	3301      	adds	r3, #1
 8000432:	61bb      	str	r3, [r7, #24]
 8000434:	69bb      	ldr	r3, [r7, #24]
 8000436:	2b07      	cmp	r3, #7
 8000438:	d9c3      	bls.n	80003c2 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	697a      	ldr	r2, [r7, #20]
 800043e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	2bff      	cmp	r3, #255	; 0xff
 8000446:	d946      	bls.n	80004d6 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800044e:	2300      	movs	r3, #0
 8000450:	61bb      	str	r3, [r7, #24]
 8000452:	e03a      	b.n	80004ca <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000454:	69bb      	ldr	r3, [r7, #24]
 8000456:	3308      	adds	r3, #8
 8000458:	2201      	movs	r2, #1
 800045a:	fa02 f303 	lsl.w	r3, r2, r3
 800045e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	461a      	mov	r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	4013      	ands	r3, r2
 800046a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800046c:	693a      	ldr	r2, [r7, #16]
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	429a      	cmp	r2, r3
 8000472:	d127      	bne.n	80004c4 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000474:	69bb      	ldr	r3, [r7, #24]
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800047a:	220f      	movs	r2, #15
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	fa02 f303 	lsl.w	r3, r2, r3
 8000482:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	43db      	mvns	r3, r3
 8000488:	697a      	ldr	r2, [r7, #20]
 800048a:	4013      	ands	r3, r2
 800048c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800048e:	69fa      	ldr	r2, [r7, #28]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	fa02 f303 	lsl.w	r3, r2, r3
 8000496:	697a      	ldr	r2, [r7, #20]
 8000498:	4313      	orrs	r3, r2
 800049a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	78db      	ldrb	r3, [r3, #3]
 80004a0:	2b28      	cmp	r3, #40	; 0x28
 80004a2:	d105      	bne.n	80004b0 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80004a4:	69bb      	ldr	r3, [r7, #24]
 80004a6:	3308      	adds	r3, #8
 80004a8:	2201      	movs	r2, #1
 80004aa:	409a      	lsls	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	78db      	ldrb	r3, [r3, #3]
 80004b4:	2b48      	cmp	r3, #72	; 0x48
 80004b6:	d105      	bne.n	80004c4 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80004b8:	69bb      	ldr	r3, [r7, #24]
 80004ba:	3308      	adds	r3, #8
 80004bc:	2201      	movs	r2, #1
 80004be:	409a      	lsls	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80004c4:	69bb      	ldr	r3, [r7, #24]
 80004c6:	3301      	adds	r3, #1
 80004c8:	61bb      	str	r3, [r7, #24]
 80004ca:	69bb      	ldr	r3, [r7, #24]
 80004cc:	2b07      	cmp	r3, #7
 80004ce:	d9c1      	bls.n	8000454 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	697a      	ldr	r2, [r7, #20]
 80004d4:	605a      	str	r2, [r3, #4]
  }
}
 80004d6:	bf00      	nop
 80004d8:	3724      	adds	r7, #36	; 0x24
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80004e0:	b490      	push	{r4, r7}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	460a      	mov	r2, r1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	4613      	mov	r3, r2
 80004ee:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80004f4:	79bb      	ldrb	r3, [r7, #6]
 80004f6:	f003 0303 	and.w	r3, r3, #3
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	220f      	movs	r2, #15
 80004fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000502:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000504:	4916      	ldr	r1, [pc, #88]	; (8000560 <GPIO_EXTILineConfig+0x80>)
 8000506:	79bb      	ldrb	r3, [r7, #6]
 8000508:	089b      	lsrs	r3, r3, #2
 800050a:	b2db      	uxtb	r3, r3
 800050c:	4618      	mov	r0, r3
 800050e:	4a14      	ldr	r2, [pc, #80]	; (8000560 <GPIO_EXTILineConfig+0x80>)
 8000510:	79bb      	ldrb	r3, [r7, #6]
 8000512:	089b      	lsrs	r3, r3, #2
 8000514:	b2db      	uxtb	r3, r3
 8000516:	3302      	adds	r3, #2
 8000518:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	43db      	mvns	r3, r3
 8000520:	401a      	ands	r2, r3
 8000522:	1c83      	adds	r3, r0, #2
 8000524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <GPIO_EXTILineConfig+0x80>)
 800052a:	79bb      	ldrb	r3, [r7, #6]
 800052c:	089b      	lsrs	r3, r3, #2
 800052e:	b2db      	uxtb	r3, r3
 8000530:	461c      	mov	r4, r3
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <GPIO_EXTILineConfig+0x80>)
 8000534:	79bb      	ldrb	r3, [r7, #6]
 8000536:	089b      	lsrs	r3, r3, #2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	3302      	adds	r3, #2
 800053c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000540:	79f9      	ldrb	r1, [r7, #7]
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	f003 0303 	and.w	r3, r3, #3
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	431a      	orrs	r2, r3
 8000550:	1ca3      	adds	r3, r4, #2
 8000552:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bc90      	pop	{r4, r7}
 800055e:	4770      	bx	lr
 8000560:	40010000 	.word	0x40010000

08000564 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000564:	b480      	push	{r7}
 8000566:	b087      	sub	sp, #28
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800057c:	4b4c      	ldr	r3, [pc, #304]	; (80006b0 <RCC_GetClocksFreq+0x14c>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	f003 030c 	and.w	r3, r3, #12
 8000584:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	2b04      	cmp	r3, #4
 800058a:	d007      	beq.n	800059c <RCC_GetClocksFreq+0x38>
 800058c:	2b08      	cmp	r3, #8
 800058e:	d009      	beq.n	80005a4 <RCC_GetClocksFreq+0x40>
 8000590:	2b00      	cmp	r3, #0
 8000592:	d133      	bne.n	80005fc <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a47      	ldr	r2, [pc, #284]	; (80006b4 <RCC_GetClocksFreq+0x150>)
 8000598:	601a      	str	r2, [r3, #0]
      break;
 800059a:	e033      	b.n	8000604 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a45      	ldr	r2, [pc, #276]	; (80006b4 <RCC_GetClocksFreq+0x150>)
 80005a0:	601a      	str	r2, [r3, #0]
      break;
 80005a2:	e02f      	b.n	8000604 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80005a4:	4b42      	ldr	r3, [pc, #264]	; (80006b0 <RCC_GetClocksFreq+0x14c>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80005ac:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80005ae:	4b40      	ldr	r3, [pc, #256]	; (80006b0 <RCC_GetClocksFreq+0x14c>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005b6:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	0c9b      	lsrs	r3, r3, #18
 80005bc:	3302      	adds	r3, #2
 80005be:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d106      	bne.n	80005d4 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	4a3b      	ldr	r2, [pc, #236]	; (80006b8 <RCC_GetClocksFreq+0x154>)
 80005ca:	fb02 f203 	mul.w	r2, r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80005d2:	e017      	b.n	8000604 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80005d4:	4b36      	ldr	r3, [pc, #216]	; (80006b0 <RCC_GetClocksFreq+0x14c>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d006      	beq.n	80005ee <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	4a35      	ldr	r2, [pc, #212]	; (80006b8 <RCC_GetClocksFreq+0x154>)
 80005e4:	fb02 f203 	mul.w	r2, r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	601a      	str	r2, [r3, #0]
      break;
 80005ec:	e00a      	b.n	8000604 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	4a30      	ldr	r2, [pc, #192]	; (80006b4 <RCC_GetClocksFreq+0x150>)
 80005f2:	fb02 f203 	mul.w	r2, r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	601a      	str	r2, [r3, #0]
      break;
 80005fa:	e003      	b.n	8000604 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a2d      	ldr	r2, [pc, #180]	; (80006b4 <RCC_GetClocksFreq+0x150>)
 8000600:	601a      	str	r2, [r3, #0]
      break;
 8000602:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000604:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <RCC_GetClocksFreq+0x14c>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800060c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	091b      	lsrs	r3, r3, #4
 8000612:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000614:	4a29      	ldr	r2, [pc, #164]	; (80006bc <RCC_GetClocksFreq+0x158>)
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	40da      	lsrs	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <RCC_GetClocksFreq+0x14c>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000634:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800063c:	4a1f      	ldr	r2, [pc, #124]	; (80006bc <RCC_GetClocksFreq+0x158>)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	4413      	add	r3, r2
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	685a      	ldr	r2, [r3, #4]
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	40da      	lsrs	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <RCC_GetClocksFreq+0x14c>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800065c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	0adb      	lsrs	r3, r3, #11
 8000662:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000664:	4a15      	ldr	r2, [pc, #84]	; (80006bc <RCC_GetClocksFreq+0x158>)
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	40da      	lsrs	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <RCC_GetClocksFreq+0x14c>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	0b9b      	lsrs	r3, r3, #14
 800068a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 800068c:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <RCC_GetClocksFreq+0x15c>)
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	68da      	ldr	r2, [r3, #12]
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	fbb2 f2f3 	udiv	r2, r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	611a      	str	r2, [r3, #16]
}
 80006a6:	bf00      	nop
 80006a8:	371c      	adds	r7, #28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	40021000 	.word	0x40021000
 80006b4:	007a1200 	.word	0x007a1200
 80006b8:	003d0900 	.word	0x003d0900
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000010 	.word	0x20000010

080006c4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d006      	beq.n	80006e4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006d6:	4909      	ldr	r1, [pc, #36]	; (80006fc <RCC_APB2PeriphClockCmd+0x38>)
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <RCC_APB2PeriphClockCmd+0x38>)
 80006da:	699a      	ldr	r2, [r3, #24]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4313      	orrs	r3, r2
 80006e0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006e2:	e006      	b.n	80006f2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006e4:	4905      	ldr	r1, [pc, #20]	; (80006fc <RCC_APB2PeriphClockCmd+0x38>)
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <RCC_APB2PeriphClockCmd+0x38>)
 80006e8:	699a      	ldr	r2, [r3, #24]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	43db      	mvns	r3, r3
 80006ee:	4013      	ands	r3, r2
 80006f0:	618b      	str	r3, [r1, #24]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	40021000 	.word	0x40021000

08000700 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d006      	beq.n	8000720 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000712:	4909      	ldr	r1, [pc, #36]	; (8000738 <RCC_APB1PeriphClockCmd+0x38>)
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <RCC_APB1PeriphClockCmd+0x38>)
 8000716:	69da      	ldr	r2, [r3, #28]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4313      	orrs	r3, r2
 800071c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800071e:	e006      	b.n	800072e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000720:	4905      	ldr	r1, [pc, #20]	; (8000738 <RCC_APB1PeriphClockCmd+0x38>)
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <RCC_APB1PeriphClockCmd+0x38>)
 8000724:	69da      	ldr	r2, [r3, #28]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	43db      	mvns	r3, r3
 800072a:	4013      	ands	r3, r2
 800072c:	61cb      	str	r3, [r1, #28]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	40021000 	.word	0x40021000

0800073c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000746:	2300      	movs	r3, #0
 8000748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800074a:	2300      	movs	r3, #0
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	8a1b      	ldrh	r3, [r3, #16]
 8000762:	b29b      	uxth	r3, r3
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000768:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800076c:	4013      	ands	r3, r2
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	88db      	ldrh	r3, [r3, #6]
 8000774:	461a      	mov	r2, r3
 8000776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000778:	4313      	orrs	r3, r2
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800077e:	b29a      	uxth	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	899b      	ldrh	r3, [r3, #12]
 8000788:	b29b      	uxth	r3, r3
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800078c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800078e:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000792:	4013      	ands	r3, r2
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	889a      	ldrh	r2, [r3, #4]
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	891b      	ldrh	r3, [r3, #8]
 800079e:	4313      	orrs	r3, r2
 80007a0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80007a6:	4313      	orrs	r3, r2
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	461a      	mov	r2, r3
 80007ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ae:	4313      	orrs	r3, r2
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80007b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	8a9b      	ldrh	r3, [r3, #20]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80007c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007c4:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80007c8:	4013      	ands	r3, r2
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	899b      	ldrh	r3, [r3, #12]
 80007d0:	461a      	mov	r2, r3
 80007d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d4:	4313      	orrs	r3, r2
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80007d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007da:	b29a      	uxth	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff febd 	bl	8000564 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	4a2e      	ldr	r2, [pc, #184]	; (80008a8 <USART_Init+0x16c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d102      	bne.n	80007f8 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80007f6:	e001      	b.n	80007fc <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	899b      	ldrh	r3, [r3, #12]
 8000800:	b29b      	uxth	r3, r3
 8000802:	b21b      	sxth	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	da0c      	bge.n	8000822 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800080a:	4613      	mov	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4413      	add	r3, r2
 8000810:	009a      	lsls	r2, r3, #2
 8000812:	441a      	add	r2, r3
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	fbb2 f3f3 	udiv	r3, r2, r3
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
 8000820:	e00b      	b.n	800083a <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000824:	4613      	mov	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	009a      	lsls	r2, r3, #2
 800082c:	441a      	add	r2, r3
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	fbb2 f3f3 	udiv	r3, r2, r3
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800083a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083c:	4a1b      	ldr	r2, [pc, #108]	; (80008ac <USART_Init+0x170>)
 800083e:	fba2 2303 	umull	r2, r3, r2, r3
 8000842:	095b      	lsrs	r3, r3, #5
 8000844:	011b      	lsls	r3, r3, #4
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800084a:	091b      	lsrs	r3, r3, #4
 800084c:	2264      	movs	r2, #100	; 0x64
 800084e:	fb02 f303 	mul.w	r3, r2, r3
 8000852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	899b      	ldrh	r3, [r3, #12]
 800085c:	b29b      	uxth	r3, r3
 800085e:	b21b      	sxth	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	da0c      	bge.n	800087e <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000864:	6a3b      	ldr	r3, [r7, #32]
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	3332      	adds	r3, #50	; 0x32
 800086a:	4a10      	ldr	r2, [pc, #64]	; (80008ac <USART_Init+0x170>)
 800086c:	fba2 2303 	umull	r2, r3, r2, r3
 8000870:	095b      	lsrs	r3, r3, #5
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000878:	4313      	orrs	r3, r2
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800087c:	e00b      	b.n	8000896 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800087e:	6a3b      	ldr	r3, [r7, #32]
 8000880:	011b      	lsls	r3, r3, #4
 8000882:	3332      	adds	r3, #50	; 0x32
 8000884:	4a09      	ldr	r2, [pc, #36]	; (80008ac <USART_Init+0x170>)
 8000886:	fba2 2303 	umull	r2, r3, r2, r3
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	f003 030f 	and.w	r3, r3, #15
 8000890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000892:	4313      	orrs	r3, r2
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000898:	b29a      	uxth	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	811a      	strh	r2, [r3, #8]
}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	; 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40013800 	.word	0x40013800
 80008ac:	51eb851f 	.word	0x51eb851f

080008b0 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008be:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	220c      	movs	r2, #12
 80008d6:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	819a      	strh	r2, [r3, #12]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008f4:	78fb      	ldrb	r3, [r7, #3]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d008      	beq.n	800090c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	899b      	ldrh	r3, [r3, #12]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000904:	b29a      	uxth	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 800090a:	e007      	b.n	800091c <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	899b      	ldrh	r3, [r3, #12]
 8000910:	b29b      	uxth	r3, r3
 8000912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000916:	b29a      	uxth	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	819a      	strh	r2, [r3, #12]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr

08000926 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000926:	b480      	push	{r7}
 8000928:	b087      	sub	sp, #28
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	460b      	mov	r3, r1
 8000930:	807b      	strh	r3, [r7, #2]
 8000932:	4613      	mov	r3, r2
 8000934:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	095b      	lsrs	r3, r3, #5
 8000950:	b2db      	uxtb	r3, r3
 8000952:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8000954:	887b      	ldrh	r3, [r7, #2]
 8000956:	f003 031f 	and.w	r3, r3, #31
 800095a:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800095c:	2201      	movs	r2, #1
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d103      	bne.n	8000974 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	330c      	adds	r3, #12
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	e009      	b.n	8000988 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	2b02      	cmp	r3, #2
 8000978:	d103      	bne.n	8000982 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	3310      	adds	r3, #16
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e002      	b.n	8000988 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	3314      	adds	r3, #20
 8000986:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000988:	787b      	ldrb	r3, [r7, #1]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d006      	beq.n	800099c <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	6811      	ldr	r1, [r2, #0]
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	430a      	orrs	r2, r1
 8000998:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800099a:	e006      	b.n	80009aa <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	697a      	ldr	r2, [r7, #20]
 80009a0:	6811      	ldr	r1, [r2, #0]
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	43d2      	mvns	r2, r2
 80009a6:	400a      	ands	r2, r1
 80009a8:	601a      	str	r2, [r3, #0]
}
 80009aa:	bf00      	nop
 80009ac:	371c      	adds	r7, #28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	809a      	strh	r2, [r3, #4]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b085      	sub	sp, #20
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	460b      	mov	r3, r1
 80009e0:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	887b      	ldrh	r3, [r7, #2]
 80009ee:	4013      	ands	r3, r2
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d002      	beq.n	80009fc <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80009f6:	2301      	movs	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	e001      	b.n	8000a00 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80009fc:	2300      	movs	r3, #0
 80009fe:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 8000a18:	887b      	ldrh	r3, [r7, #2]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	801a      	strh	r2, [r3, #0]
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <STM_EVAL_LEDInit>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO Clock */
  RCC_APB2PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000a36:	2304      	movs	r3, #4
 8000a38:	2101      	movs	r1, #1
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fe42 	bl	80006c4 <RCC_APB2PeriphClockCmd>

  /* Configure the GPIO pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000a40:	2320      	movs	r3, #32
 8000a42:	81bb      	strh	r3, [r7, #12]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000a44:	2310      	movs	r3, #16
 8000a46:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	73bb      	strb	r3, [r7, #14]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure); 
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <STM_EVAL_LEDInit+0x3c>)
 8000a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a54:	f107 020c 	add.w	r2, r7, #12
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fc84 	bl	8000368 <GPIO_Init>
}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000014 	.word	0x20000014

08000a6c <STM_EVAL_LEDToggle>:
  * @param  Led: Specifies the Led to be toggled. 
  *         This parameter must be: LED2
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <STM_EVAL_LEDToggle+0x2c>)
 8000a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7e:	79fa      	ldrb	r2, [r7, #7]
 8000a80:	4905      	ldr	r1, [pc, #20]	; (8000a98 <STM_EVAL_LEDToggle+0x2c>)
 8000a82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a86:	68d2      	ldr	r2, [r2, #12]
 8000a88:	2120      	movs	r1, #32
 8000a8a:	404a      	eors	r2, r1
 8000a8c:	60da      	str	r2, [r3, #12]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	20000014 	.word	0x20000014

08000a9c <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	460a      	mov	r2, r1
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;
  
  /* Enable the GPIO Clock */
  RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
 8000aac:	2310      	movs	r3, #16
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fe05 	bl	80006c4 <RCC_APB2PeriphClockCmd>
  
  /* Configure Button pin as input floating */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000aba:	2304      	movs	r3, #4
 8000abc:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8000abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac2:	82bb      	strh	r3, [r7, #20]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	4a18      	ldr	r2, [pc, #96]	; (8000b28 <STM_EVAL_PBInit+0x8c>)
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	f107 0214 	add.w	r2, r7, #20
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fc48 	bl	8000368 <GPIO_Init>


  if (Button_Mode == BUTTON_MODE_EXTI)
 8000ad8:	79bb      	ldrb	r3, [r7, #6]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d120      	bne.n	8000b20 <STM_EVAL_PBInit+0x84>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    GPIO_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8000ade:	2302      	movs	r3, #2
 8000ae0:	220d      	movs	r2, #13
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fcfb 	bl	80004e0 <GPIO_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8000aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aee:	60fb      	str	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000af0:	2300      	movs	r3, #0
 8000af2:	743b      	strb	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8000af4:	2308      	movs	r3, #8
 8000af6:	747b      	strb	r3, [r7, #17]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000af8:	2301      	movs	r3, #1
 8000afa:	74bb      	strb	r3, [r7, #18]
    EXTI_Init(&EXTI_InitStructure);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fb8d 	bl	8000220 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8000b06:	2328      	movs	r3, #40	; 0x28
 8000b08:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8000b0e:	230f      	movs	r3, #15
 8000b10:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000b12:	2301      	movs	r3, #1
 8000b14:	72fb      	strb	r3, [r7, #11]

    NVIC_Init(&NVIC_InitStructure); 
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fb1e 	bl	800015c <NVIC_Init>
  }
}
 8000b20:	bf00      	nop
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000018 	.word	0x20000018

08000b2c <_ZN4GPIOC1E19GPIO_PortPinTypeDef16GPIOMode_TypeDef17GPIOSpeed_TypeDef>:
 * @date    Sep 30, 2021
 */

#include "gpio.hpp"

GPIO::GPIO(GPIO_PortPinTypeDef portPin,
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	4608      	mov	r0, r1
 8000b36:	4611      	mov	r1, r2
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	70fb      	strb	r3, [r7, #3]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	70bb      	strb	r3, [r7, #2]
 8000b42:	4613      	mov	r3, r2
 8000b44:	707b      	strb	r3, [r7, #1]
           GPIOMode_TypeDef mode,
           GPIOSpeed_TypeDef speed)
{
  this->_portPin = portPin;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	78fa      	ldrb	r2, [r7, #3]
 8000b4a:	701a      	strb	r2, [r3, #0]
  this->_mode = mode;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	78ba      	ldrb	r2, [r7, #2]
 8000b50:	705a      	strb	r2, [r3, #1]
  this->_speed = speed;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	787a      	ldrb	r2, [r7, #1]
 8000b56:	709a      	strb	r2, [r3, #2]
  this->init();
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 f805 	bl	8000b68 <_ZN4GPIO4initEv>
}
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <_ZN4GPIO4initEv>:

void GPIO::init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Mode = this->_mode;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	785b      	ldrb	r3, [r3, #1]
 8000b74:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = this->_speed;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	789b      	ldrb	r3, [r3, #2]
 8000b7a:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_Pin = this->getPin();
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 f883 	bl	8000c88 <_ZN4GPIO6getPinEv>
 8000b82:	4603      	mov	r3, r0
 8000b84:	81bb      	strh	r3, [r7, #12]
  GPIO_Init(this->getPort(), &GPIO_InitStructure);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 f84c 	bl	8000c24 <_ZN4GPIO7getPortEv>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	4619      	mov	r1, r3
 8000b94:	4610      	mov	r0, r2
 8000b96:	f7ff fbe7 	bl	8000368 <GPIO_Init>
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <_ZN4GPIO8setValueE17GPIO_ValueTypeDef>:

void GPIO::setValue(GPIO_ValueTypeDef value)
{
 8000ba2:	b590      	push	{r4, r7, lr}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	460b      	mov	r3, r1
 8000bac:	70fb      	strb	r3, [r7, #3]
  switch (value)
 8000bae:	78fb      	ldrb	r3, [r7, #3]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <_ZN4GPIO8setValueE17GPIO_ValueTypeDef+0x18>
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d00e      	beq.n	8000bd6 <_ZN4GPIO8setValueE17GPIO_ValueTypeDef+0x34>

  case High:
    (this->getPort())->BSRR |= (this->getPin()); // Set value HIGH
    break;
  }
}
 8000bb8:	e01b      	b.n	8000bf2 <_ZN4GPIO8setValueE17GPIO_ValueTypeDef+0x50>
    (this->getPort())->BRR |= (this->getPin()); // Set value LOW
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f000 f864 	bl	8000c88 <_ZN4GPIO6getPinEv>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461c      	mov	r4, r3
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 f82d 	bl	8000c24 <_ZN4GPIO7getPortEv>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	695a      	ldr	r2, [r3, #20]
 8000bce:	4621      	mov	r1, r4
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	615a      	str	r2, [r3, #20]
    break;
 8000bd4:	e00d      	b.n	8000bf2 <_ZN4GPIO8setValueE17GPIO_ValueTypeDef+0x50>
    (this->getPort())->BSRR |= (this->getPin()); // Set value HIGH
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f856 	bl	8000c88 <_ZN4GPIO6getPinEv>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461c      	mov	r4, r3
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f000 f81f 	bl	8000c24 <_ZN4GPIO7getPortEv>
 8000be6:	4603      	mov	r3, r0
 8000be8:	691a      	ldr	r2, [r3, #16]
 8000bea:	4621      	mov	r1, r4
 8000bec:	430a      	orrs	r2, r1
 8000bee:	611a      	str	r2, [r3, #16]
    break;
 8000bf0:	bf00      	nop
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd90      	pop	{r4, r7, pc}

08000bfa <_ZN4GPIO11toggleValueEv>:
{
  this->setValue(this->uint8_t_to_GPIO_Value_TypeDef(value));
}

void GPIO::toggleValue(void)
{
 8000bfa:	b590      	push	{r4, r7, lr}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  (this->getPort())->ODR ^= (this->getPin());
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f840 	bl	8000c88 <_ZN4GPIO6getPinEv>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461c      	mov	r4, r3
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f000 f809 	bl	8000c24 <_ZN4GPIO7getPortEv>
 8000c12:	4603      	mov	r3, r0
 8000c14:	68da      	ldr	r2, [r3, #12]
 8000c16:	4621      	mov	r1, r4
 8000c18:	404a      	eors	r2, r1
 8000c1a:	60da      	str	r2, [r3, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd90      	pop	{r4, r7, pc}

08000c24 <_ZN4GPIO7getPortEv>:

  return value;
}

GPIO_TypeDef *GPIO::getPort(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if (((uint8_t)this->_portPin) <= ((uint8_t)PA15)) // Port-A:  0~15
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	dc01      	bgt.n	8000c38 <_ZN4GPIO7getPortEv+0x14>
    return GPIOA;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <_ZN4GPIO7getPortEv+0x50>)
 8000c36:	e017      	b.n	8000c68 <_ZN4GPIO7getPortEv+0x44>
  else if (((uint8_t)this->_portPin) <= ((uint8_t)PB15)) // Port-B: 16~31
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b1f      	cmp	r3, #31
 8000c3e:	dc01      	bgt.n	8000c44 <_ZN4GPIO7getPortEv+0x20>
    return GPIOB;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <_ZN4GPIO7getPortEv+0x54>)
 8000c42:	e011      	b.n	8000c68 <_ZN4GPIO7getPortEv+0x44>
  else if (((uint8_t)this->_portPin) <= ((uint8_t)PC15)) // Port-C: 32~47
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b2f      	cmp	r3, #47	; 0x2f
 8000c4a:	dc01      	bgt.n	8000c50 <_ZN4GPIO7getPortEv+0x2c>
    return GPIOC;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <_ZN4GPIO7getPortEv+0x58>)
 8000c4e:	e00b      	b.n	8000c68 <_ZN4GPIO7getPortEv+0x44>
  else if (((uint8_t)this->_portPin) <= ((uint8_t)PD15)) // Port-D: 48~63
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b3f      	cmp	r3, #63	; 0x3f
 8000c56:	dc01      	bgt.n	8000c5c <_ZN4GPIO7getPortEv+0x38>
    return GPIOD;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <_ZN4GPIO7getPortEv+0x5c>)
 8000c5a:	e005      	b.n	8000c68 <_ZN4GPIO7getPortEv+0x44>
  else if (((uint8_t)this->_portPin) <= ((uint8_t)PE15)) // Port-E: 64~79
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b4f      	cmp	r3, #79	; 0x4f
 8000c62:	dc01      	bgt.n	8000c68 <_ZN4GPIO7getPortEv+0x44>
    return GPIOE;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <_ZN4GPIO7getPortEv+0x60>)
 8000c66:	e7ff      	b.n	8000c68 <_ZN4GPIO7getPortEv+0x44>
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40010800 	.word	0x40010800
 8000c78:	40010c00 	.word	0x40010c00
 8000c7c:	40011000 	.word	0x40011000
 8000c80:	40011400 	.word	0x40011400
 8000c84:	40011800 	.word	0x40011800

08000c88 <_ZN4GPIO6getPinEv>:

uint16_t GPIO::getPin(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint8_t offset = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]

  if (((uint8_t)this->_portPin) <= ((uint8_t)PA15)) // Port-A:  0~15
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	dc02      	bgt.n	8000ca2 <_ZN4GPIO6getPinEv+0x1a>
    offset = ((uint8_t)PA0);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e01a      	b.n	8000cd8 <_ZN4GPIO6getPinEv+0x50>
  else if (((uint8_t)this->_portPin) <= ((uint8_t)PB15)) // Port-B: 16~31
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b1f      	cmp	r3, #31
 8000ca8:	dc02      	bgt.n	8000cb0 <_ZN4GPIO6getPinEv+0x28>
    offset = ((uint8_t)PB0);
 8000caa:	2310      	movs	r3, #16
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e013      	b.n	8000cd8 <_ZN4GPIO6getPinEv+0x50>
  else if (((uint8_t)this->_portPin) <= ((uint8_t)PC15)) // Port-C: 32~47
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b2f      	cmp	r3, #47	; 0x2f
 8000cb6:	dc02      	bgt.n	8000cbe <_ZN4GPIO6getPinEv+0x36>
    offset = ((uint8_t)PC0);
 8000cb8:	2320      	movs	r3, #32
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	e00c      	b.n	8000cd8 <_ZN4GPIO6getPinEv+0x50>
  else if (((uint8_t)this->_portPin) <= ((uint8_t)PD15)) // Port-D: 48~63
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b3f      	cmp	r3, #63	; 0x3f
 8000cc4:	dc02      	bgt.n	8000ccc <_ZN4GPIO6getPinEv+0x44>
    offset = ((uint8_t)PD0);
 8000cc6:	2330      	movs	r3, #48	; 0x30
 8000cc8:	73fb      	strb	r3, [r7, #15]
 8000cca:	e005      	b.n	8000cd8 <_ZN4GPIO6getPinEv+0x50>
  else if (((uint8_t)this->_portPin) <= ((uint8_t)PE15)) // Port-E: 64~79
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b4f      	cmp	r3, #79	; 0x4f
 8000cd2:	dc01      	bgt.n	8000cd8 <_ZN4GPIO6getPinEv+0x50>
    offset = ((uint8_t)PE0);
 8000cd4:	2340      	movs	r3, #64	; 0x40
 8000cd6:	73fb      	strb	r3, [r7, #15]

  return ((uint16_t)(0x0001 << (((uint8_t)this->_portPin) - offset)));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	b29b      	uxth	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	da0b      	bge.n	8000d20 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000d08:	490d      	ldr	r1, [pc, #52]	; (8000d40 <NVIC_SetPriority+0x4c>)
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 030f 	and.w	r3, r3, #15
 8000d10:	3b04      	subs	r3, #4
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000d1e:	e009      	b.n	8000d34 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000d20:	4908      	ldr	r1, [pc, #32]	; (8000d44 <NVIC_SetPriority+0x50>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d56:	d301      	bcc.n	8000d5c <SysTick_Config+0x14>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e011      	b.n	8000d80 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <SysTick_Config+0x40>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d64:	3b01      	subs	r3, #1
 8000d66:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000d68:	210f      	movs	r1, #15
 8000d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6e:	f7ff ffc1 	bl	8000cf4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SysTick_Config+0x40>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <SysTick_Config+0x40>)
 8000d7a:	2207      	movs	r2, #7
 8000d7c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <main>:
static __IO uint32_t TimingDelay;
uint8_t BlinkSpeed = 0;
RCC_ClocksTypeDef RCC_Clocks;

int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b092      	sub	sp, #72	; 0x48
 8000d90:	af00      	add	r7, sp, #0
  /* SysTick end of count event each 1ms */
  rccInit();
 8000d92:	f000 f89f 	bl	8000ed4 <rccInit>
  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000d96:	4b4b      	ldr	r3, [pc, #300]	; (8000ec4 <main+0x138>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	4a4b      	ldr	r2, [pc, #300]	; (8000ec8 <main+0x13c>)
 8000d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000da0:	099b      	lsrs	r3, r3, #6
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ffd0 	bl	8000d48 <SysTick_Config>

  /* Initialize LED2 */
  STM_EVAL_LEDInit(LED2);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff fe3f 	bl	8000a2c <STM_EVAL_LEDInit>

  /* Initialize User_Button on STM32NUCLEO */
  STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_EXTI);
 8000dae:	2101      	movs	r1, #1
 8000db0:	2000      	movs	r0, #0
 8000db2:	f7ff fe73 	bl	8000a9c <STM_EVAL_PBInit>

  /* Initiate Blink Speed variable */
  BlinkSpeed = 0;
 8000db6:	4b45      	ldr	r3, [pc, #276]	; (8000ecc <main+0x140>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]

  GPIO g1(D12, GPIO_Mode_Out_PP);
 8000dbc:	f107 000c 	add.w	r0, r7, #12
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	2210      	movs	r2, #16
 8000dc4:	2106      	movs	r1, #6
 8000dc6:	f7ff feb1 	bl	8000b2c <_ZN4GPIOC1E19GPIO_PortPinTypeDef16GPIOMode_TypeDef17GPIOSpeed_TypeDef>
  g1.setValue(Low);
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fee6 	bl	8000ba2 <_ZN4GPIO8setValueE17GPIO_ValueTypeDef>
  GPIO g2(D11, GPIO_Mode_Out_PP);
 8000dd6:	f107 0008 	add.w	r0, r7, #8
 8000dda:	2302      	movs	r3, #2
 8000ddc:	2210      	movs	r2, #16
 8000dde:	2107      	movs	r1, #7
 8000de0:	f7ff fea4 	bl	8000b2c <_ZN4GPIOC1E19GPIO_PortPinTypeDef16GPIOMode_TypeDef17GPIOSpeed_TypeDef>
  g2.setValue(High);
 8000de4:	f107 0308 	add.w	r3, r7, #8
 8000de8:	2101      	movs	r1, #1
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fed9 	bl	8000ba2 <_ZN4GPIO8setValueE17GPIO_ValueTypeDef>

  USART usb;
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f9b6 	bl	8001164 <_ZN5USARTC1Ev>
  usb.send("Hello");
 8000df8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 fa35 	bl	800126c <_ZNSaIcEC1Ev>
 8000e02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4931      	ldr	r1, [pc, #196]	; (8000ed0 <main+0x144>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fa91 	bl	8001334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000e12:	f107 0210 	add.w	r2, r7, #16
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f9ee 	bl	80011fc <_ZN5USART4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 fa57 	bl	80012d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000e2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fa1d 	bl	800126e <_ZNSaIcED1Ev>

  while (1)
  {
    /* Test on blink speed */
    if (BlinkSpeed == 0)
 8000e34:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <main+0x140>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d110      	bne.n	8000e5e <main+0xd2>
    {
      /*LED2 Toggle each 50ms*/
      STM_EVAL_LEDToggle(LED2);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff fe15 	bl	8000a6c <STM_EVAL_LEDToggle>
      g1.toggleValue();
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fed7 	bl	8000bfa <_ZN4GPIO11toggleValueEv>
      g2.toggleValue();
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fed2 	bl	8000bfa <_ZN4GPIO11toggleValueEv>
      Delay(50);
 8000e56:	2032      	movs	r0, #50	; 0x32
 8000e58:	f000 f850 	bl	8000efc <Delay>
 8000e5c:	e013      	b.n	8000e86 <main+0xfa>
    }
    else if (BlinkSpeed == 1)
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <main+0x140>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d10f      	bne.n	8000e86 <main+0xfa>
    {
      STM_EVAL_LEDToggle(LED2);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff fe00 	bl	8000a6c <STM_EVAL_LEDToggle>
      g1.toggleValue();
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fec2 	bl	8000bfa <_ZN4GPIO11toggleValueEv>
      g2.toggleValue();
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff febd 	bl	8000bfa <_ZN4GPIO11toggleValueEv>
      /*LED2 Toggle each 200ms */
      Delay(200);
 8000e80:	20c8      	movs	r0, #200	; 0xc8
 8000e82:	f000 f83b 	bl	8000efc <Delay>
    }
    usb.send("Hello");
 8000e86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f9ee 	bl	800126c <_ZNSaIcEC1Ev>
 8000e90:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000e94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e98:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <main+0x144>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fa4a 	bl	8001334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000ea0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f9a7 	bl	80011fc <_ZN5USART4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fa10 	bl	80012d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000eb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f9d6 	bl	800126e <_ZNSaIcED1Ev>
    if (BlinkSpeed == 0)
 8000ec2:	e7b7      	b.n	8000e34 <main+0xa8>
 8000ec4:	200000a4 	.word	0x200000a4
 8000ec8:	10624dd3 	.word	0x10624dd3
 8000ecc:	200000a0 	.word	0x200000a0
 8000ed0:	0800191c 	.word	0x0800191c

08000ed4 <rccInit>:
  }
}

void rccInit()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  RCC_GetClocksFreq(&RCC_Clocks);
 8000ed8:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <rccInit+0x20>)
 8000eda:	f7ff fb43 	bl	8000564 <RCC_GetClocksFreq>
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2 |
                             RCC_APB1Periph_USART3 |
                             RCC_APB1Periph_TIM2 |
                             RCC_APB1Periph_TIM3 |
                             RCC_APB1Periph_TIM4,
                         ENABLE);
 8000ede:	2101      	movs	r1, #1
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <rccInit+0x24>)
 8000ee2:	f7ff fc0d 	bl	8000700 <RCC_APB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA |
                             RCC_APB2Periph_GPIOB |
                             RCC_APB2Periph_GPIOC |
                             RCC_APB2Periph_AFIO |
                             RCC_APB2Periph_ADC1,
                         ENABLE);
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	f240 201d 	movw	r0, #541	; 0x21d
 8000eec:	f7ff fbea 	bl	80006c4 <RCC_APB2PeriphClockCmd>
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200000a4 	.word	0x200000a4
 8000ef8:	00060007 	.word	0x00060007

08000efc <Delay>:
* @brief  Inserts a delay time.
* @param  nTime: specifies the delay time length, in 1 ms.
* @retval None
*/
  void Delay(__IO uint32_t nTime)
  {
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    TimingDelay = nTime;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <Delay+0x2c>)
 8000f08:	6013      	str	r3, [r2, #0]

    while (TimingDelay != 0)
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <Delay+0x2c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	bf14      	ite	ne
 8000f12:	2301      	movne	r3, #1
 8000f14:	2300      	moveq	r3, #0
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d000      	beq.n	8000f1e <Delay+0x22>
 8000f1c:	e7f5      	b.n	8000f0a <Delay+0xe>
      ;
  }
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	2000009c 	.word	0x2000009c

08000f2c <TimingDelay_Decrement>:
* @brief  Decrements the TimingDelay variable.
* @param  None
* @retval None
*/
  void TimingDelay_Decrement(void)
  {
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
    if (TimingDelay != 0x00)
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <TimingDelay_Decrement+0x28>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf14      	ite	ne
 8000f38:	2301      	movne	r3, #1
 8000f3a:	2300      	moveq	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d004      	beq.n	8000f4c <TimingDelay_Decrement+0x20>
    {
      TimingDelay--;
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <TimingDelay_Decrement+0x28>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	4a02      	ldr	r2, [pc, #8]	; (8000f54 <TimingDelay_Decrement+0x28>)
 8000f4a:	6013      	str	r3, [r2, #0]
    }
  }
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	2000009c 	.word	0x2000009c

08000f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f5e:	e003      	b.n	8000f68 <LoopCopyDataInit>

08000f60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000f62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f66:	3104      	adds	r1, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000f6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f70:	d3f6      	bcc.n	8000f60 <CopyDataInit>
	ldr	r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000f74:	e002      	b.n	8000f7c <LoopFillZerobss>

08000f76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f78:	f842 3b04 	str.w	r3, [r2], #4

08000f7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000f7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f80:	d3f9      	bcc.n	8000f76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f82:	f000 f85f 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f000 fb5d 	bl	8001644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f8a:	f7ff feff 	bl	8000d8c <main>
	bx	lr
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f90:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000f94:	080019dc 	.word	0x080019dc
	ldr	r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f9c:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8000fa0:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8000fa4:	2000016c 	.word	0x2000016c

08000fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC1_2_IRQHandler>

08000faa <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 8000ff6:	f7ff ff99 	bl	8000f2c <TimingDelay_Decrement>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQHandler Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  if (EXTI_GetITStatus(USER_BUTTON_EXTI_LINE) != RESET)
 8001004:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001008:	f7ff f97c 	bl	8000304 <EXTI_GetITStatus>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d013      	beq.n	800103a <EXTI15_10_IRQHandler+0x3a>
  {		
    if(BlinkSpeed == 1)
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <EXTI15_10_IRQHandler+0x40>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b01      	cmp	r3, #1
 800101a:	d103      	bne.n	8001024 <EXTI15_10_IRQHandler+0x24>
    {
      BlinkSpeed = 0;
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <EXTI15_10_IRQHandler+0x40>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	e006      	b.n	8001032 <EXTI15_10_IRQHandler+0x32>
    }
    else
    {
      BlinkSpeed ++;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <EXTI15_10_IRQHandler+0x40>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	3301      	adds	r3, #1
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <EXTI15_10_IRQHandler+0x40>)
 8001030:	701a      	strb	r2, [r3, #0]
    }
    /* Clear the EXTI line pending bit */
    EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
 8001032:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001036:	f7ff f989 	bl	800034c <EXTI_ClearITPendingBit>
  }	
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200000a0 	.word	0x200000a0

08001044 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001048:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <SystemInit+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <SystemInit+0x5c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6013      	str	r3, [r2, #0]

  /* Reset SW,SWS, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */

  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001054:	4912      	ldr	r1, [pc, #72]	; (80010a0 <SystemInit+0x5c>)
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <SystemInit+0x5c>)
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <SystemInit+0x60>)
 800105c:	4013      	ands	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001060:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <SystemInit+0x5c>)
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <SystemInit+0x5c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800106a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <SystemInit+0x5c>)
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <SystemInit+0x5c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800107c:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <SystemInit+0x5c>)
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <SystemInit+0x5c>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001086:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SystemInit+0x5c>)
 800108a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800108e:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001090:	f000 f80c 	bl	80010ac <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SystemInit+0x64>)
 8001096:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800109a:	609a      	str	r2, [r3, #8]
#endif 
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40021000 	.word	0x40021000
 80010a4:	f8ff0000 	.word	0xf8ff0000
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <SetSysClock>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
  
 #ifdef PLL_SOURCE_HSI  
  /* At this stage the HSI is already enabled */
  
  /*  PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL));
 80010ba:	4a28      	ldr	r2, [pc, #160]	; (800115c <SetSysClock+0xb0>)
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <SetSysClock+0xb0>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80010c4:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLMULL16);
 80010c6:	4a25      	ldr	r2, [pc, #148]	; (800115c <SetSysClock+0xb0>)
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <SetSysClock+0xb0>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80010d0:	6053      	str	r3, [r2, #4]
  }
  
#endif /*PLL_SOURCE_HSI*/
  
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80010d2:	4a23      	ldr	r2, [pc, #140]	; (8001160 <SetSysClock+0xb4>)
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <SetSysClock+0xb4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f043 0310 	orr.w	r3, r3, #16
 80010dc:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80010de:	4a20      	ldr	r2, [pc, #128]	; (8001160 <SetSysClock+0xb4>)
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <SetSysClock+0xb4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 0303 	bic.w	r3, r3, #3
 80010e8:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80010ea:	4a1d      	ldr	r2, [pc, #116]	; (8001160 <SetSysClock+0xb4>)
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <SetSysClock+0xb4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80010f6:	4a19      	ldr	r2, [pc, #100]	; (800115c <SetSysClock+0xb0>)
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <SetSysClock+0xb0>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <SetSysClock+0xb0>)
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <SetSysClock+0xb0>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <SetSysClock+0xb0>)
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <SetSysClock+0xb0>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001110:	6053      	str	r3, [r2, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <SetSysClock+0xb0>)
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <SetSysClock+0xb0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800111c:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800111e:	bf00      	nop
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <SetSysClock+0xb0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f9      	beq.n	8001120 <SetSysClock+0x74>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <SetSysClock+0xb0>)
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <SetSysClock+0xb0>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f023 0303 	bic.w	r3, r3, #3
 8001136:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001138:	4a08      	ldr	r2, [pc, #32]	; (800115c <SetSysClock+0xb0>)
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <SetSysClock+0xb0>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001144:	bf00      	nop
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <SetSysClock+0xb0>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b08      	cmp	r3, #8
 8001150:	d1f9      	bne.n	8001146 <SetSysClock+0x9a>
    {
    }
  }
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	40021000 	.word	0x40021000
 8001160:	40022000 	.word	0x40022000

08001164 <_ZN5USARTC1Ev>:
 * @date    Sep 30, 2021
 */

#include "usart.hpp"

USART::USART()
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
{
  GPIO tx(PA2, GPIO_Mode_AF_PP, GPIO_Speed_50MHz);
 800116c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001170:	2303      	movs	r3, #3
 8001172:	2218      	movs	r2, #24
 8001174:	2102      	movs	r1, #2
 8001176:	f7ff fcd9 	bl	8000b2c <_ZN4GPIOC1E19GPIO_PortPinTypeDef16GPIOMode_TypeDef17GPIOSpeed_TypeDef>
  GPIO rx(PA3, GPIO_Mode_IN_FLOATING);
 800117a:	f107 0020 	add.w	r0, r7, #32
 800117e:	2302      	movs	r3, #2
 8001180:	2204      	movs	r2, #4
 8001182:	2103      	movs	r1, #3
 8001184:	f7ff fcd2 	bl	8000b2c <_ZN4GPIOC1E19GPIO_PortPinTypeDef16GPIOMode_TypeDef17GPIOSpeed_TypeDef>

  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8001188:	2326      	movs	r3, #38	; 0x26
 800118a:	773b      	strb	r3, [r7, #28]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 800118c:	2301      	movs	r3, #1
 800118e:	777b      	strb	r3, [r7, #29]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	77bb      	strb	r3, [r7, #30]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001194:	2301      	movs	r3, #1
 8001196:	77fb      	strb	r3, [r7, #31]
  NVIC_Init(&NVIC_InitStructure);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4618      	mov	r0, r3
 800119e:	f7fe ffdd 	bl	800015c <NVIC_Init>

  USART_InitTypeDef USART_InitStructure;
  USART_StructInit(&USART_InitStructure);
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fb82 	bl	80008b0 <USART_StructInit>
  USART_InitStructure.USART_BaudRate = 9600;
 80011ac:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80011b0:	60fb      	str	r3, [r7, #12]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80011b2:	2300      	movs	r3, #0
 80011b4:	823b      	strh	r3, [r7, #16]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	827b      	strh	r3, [r7, #18]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 80011ba:	2300      	movs	r3, #0
 80011bc:	82bb      	strh	r3, [r7, #20]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80011be:	2300      	movs	r3, #0
 80011c0:	833b      	strh	r3, [r7, #24]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80011c2:	230c      	movs	r3, #12
 80011c4:	82fb      	strh	r3, [r7, #22]
  USART_Init(USART2, &USART_InitStructure);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	480a      	ldr	r0, [pc, #40]	; (80011f8 <_ZN5USARTC1Ev+0x94>)
 80011ce:	f7ff fab5 	bl	800073c <USART_Init>

  /* Enable "Receive data register not empty" interrupt */
  USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80011d2:	2201      	movs	r2, #1
 80011d4:	f240 5125 	movw	r1, #1317	; 0x525
 80011d8:	4807      	ldr	r0, [pc, #28]	; (80011f8 <_ZN5USARTC1Ev+0x94>)
 80011da:	f7ff fba4 	bl	8000926 <USART_ITConfig>

  /* Enable USART */
  USART_Cmd(USART2, ENABLE);
 80011de:	2101      	movs	r1, #1
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <_ZN5USARTC1Ev+0x94>)
 80011e2:	f7ff fb81 	bl	80008e8 <USART_Cmd>

  /* Clear "Transmission Complete" flag, else the first bit of data will lose. */
  USART_ClearFlag(USART2, USART_FLAG_TC);
 80011e6:	2140      	movs	r1, #64	; 0x40
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <_ZN5USARTC1Ev+0x94>)
 80011ea:	f7ff fc0f 	bl	8000a0c <USART_ClearFlag>
}
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4618      	mov	r0, r3
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40004400 	.word	0x40004400

080011fc <_ZN5USART4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
    }
  }
}

void USART::send(std::string data)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  for (int i = 0; data[i] != '\0'; i++)
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4619      	mov	r1, r3
 800120e:	6838      	ldr	r0, [r7, #0]
 8001210:	f000 f868 	bl	80012e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001214:	4603      	mov	r3, r0
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf14      	ite	ne
 800121c:	2301      	movne	r3, #1
 800121e:	2300      	moveq	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d01c      	beq.n	8001260 <_ZN5USART4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x64>
  {
    /* Transmits single data through the USARTx peripheral */
    USART_SendData(USART2, (uint16_t)data[i]);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4619      	mov	r1, r3
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f000 f85a 	bl	80012e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001230:	4603      	mov	r3, r0
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b29b      	uxth	r3, r3
 8001236:	4619      	mov	r1, r3
 8001238:	480b      	ldr	r0, [pc, #44]	; (8001268 <_ZN5USART4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c>)
 800123a:	f7ff fbbb 	bl	80009b4 <USART_SendData>

    /* Wait until transmission complete, use TC or TXE flag */
    while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET)
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <_ZN5USART4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c>)
 8001242:	f7ff fbc8 	bl	80009d6 <USART_GetFlagStatus>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	bf0c      	ite	eq
 800124c:	2301      	moveq	r3, #1
 800124e:	2300      	movne	r3, #0
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d000      	beq.n	8001258 <_ZN5USART4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>
 8001256:	e7f2      	b.n	800123e <_ZN5USART4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x42>
  for (int i = 0; data[i] != '\0'; i++)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3301      	adds	r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	e7d4      	b.n	800120a <_ZN5USART4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe>
    {
      /* Null */
    }
  }
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40004400 	.word	0x40004400

0800126c <_ZNSaIcEC1Ev>:
 800126c:	4770      	bx	lr

0800126e <_ZNSaIcED1Ev>:
 800126e:	4770      	bx	lr

08001270 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8001270:	b10a      	cbz	r2, 8001276 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8001272:	f000 ba1b 	b.w	80016ac <memcpy>
 8001276:	4770      	bx	lr

08001278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8001278:	b508      	push	{r3, lr}
 800127a:	680b      	ldr	r3, [r1, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	da02      	bge.n	8001286 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8001282:	f000 f870 	bl	8001366 <_ZSt20__throw_length_errorPKc>
 8001286:	4293      	cmp	r3, r2
 8001288:	d908      	bls.n	800129c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800128a:	0052      	lsls	r2, r2, #1
 800128c:	4293      	cmp	r3, r2
 800128e:	d205      	bcs.n	800129c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8001290:	2a00      	cmp	r2, #0
 8001292:	bfb6      	itet	lt
 8001294:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8001298:	600a      	strge	r2, [r1, #0]
 800129a:	600b      	strlt	r3, [r1, #0]
 800129c:	6808      	ldr	r0, [r1, #0]
 800129e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80012a2:	3001      	adds	r0, #1
 80012a4:	f000 b864 	b.w	8001370 <_Znwj>
 80012a8:	0800194c 	.word	0x0800194c

080012ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80012ac:	4603      	mov	r3, r0
 80012ae:	f853 0b08 	ldr.w	r0, [r3], #8
 80012b2:	4298      	cmp	r0, r3
 80012b4:	d001      	beq.n	80012ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80012b6:	f000 b859 	b.w	800136c <_ZdlPv>
 80012ba:	4770      	bx	lr

080012bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80012bc:	2a01      	cmp	r2, #1
 80012be:	b510      	push	{r4, lr}
 80012c0:	d102      	bne.n	80012c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80012c2:	780a      	ldrb	r2, [r1, #0]
 80012c4:	7002      	strb	r2, [r0, #0]
 80012c6:	bd10      	pop	{r4, pc}
 80012c8:	f7ff ffd2 	bl	8001270 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80012cc:	bd10      	pop	{r4, pc}

080012ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80012ce:	b508      	push	{r3, lr}
 80012d0:	1a52      	subs	r2, r2, r1
 80012d2:	f7ff fff3 	bl	80012bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80012d6:	bd08      	pop	{r3, pc}

080012d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80012d8:	b510      	push	{r4, lr}
 80012da:	4604      	mov	r4, r0
 80012dc:	f7ff ffe6 	bl	80012ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80012e0:	4620      	mov	r0, r4
 80012e2:	bd10      	pop	{r4, pc}

080012e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80012e4:	6800      	ldr	r0, [r0, #0]
 80012e6:	4408      	add	r0, r1
 80012e8:	4770      	bx	lr
	...

080012ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80012ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012ee:	4604      	mov	r4, r0
 80012f0:	4616      	mov	r6, r2
 80012f2:	460d      	mov	r5, r1
 80012f4:	b901      	cbnz	r1, 80012f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc>
 80012f6:	b9ba      	cbnz	r2, 8001328 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x3c>
 80012f8:	1b73      	subs	r3, r6, r5
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	d907      	bls.n	8001310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x24>
 8001300:	2200      	movs	r2, #0
 8001302:	a901      	add	r1, sp, #4
 8001304:	4620      	mov	r0, r4
 8001306:	f7ff ffb7 	bl	8001278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800130a:	9b01      	ldr	r3, [sp, #4]
 800130c:	6020      	str	r0, [r4, #0]
 800130e:	60a3      	str	r3, [r4, #8]
 8001310:	4632      	mov	r2, r6
 8001312:	4629      	mov	r1, r5
 8001314:	6820      	ldr	r0, [r4, #0]
 8001316:	f7ff ffda 	bl	80012ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800131a:	2100      	movs	r1, #0
 800131c:	9b01      	ldr	r3, [sp, #4]
 800131e:	6822      	ldr	r2, [r4, #0]
 8001320:	6063      	str	r3, [r4, #4]
 8001322:	54d1      	strb	r1, [r2, r3]
 8001324:	b002      	add	sp, #8
 8001326:	bd70      	pop	{r4, r5, r6, pc}
 8001328:	4801      	ldr	r0, [pc, #4]	; (8001330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800132a:	f000 f819 	bl	8001360 <_ZSt19__throw_logic_errorPKc>
 800132e:	bf00      	nop
 8001330:	08001922 	.word	0x08001922

08001334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8001334:	b538      	push	{r3, r4, r5, lr}
 8001336:	f100 0308 	add.w	r3, r0, #8
 800133a:	4604      	mov	r4, r0
 800133c:	6003      	str	r3, [r0, #0]
 800133e:	460d      	mov	r5, r1
 8001340:	b159      	cbz	r1, 800135a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8001342:	4608      	mov	r0, r1
 8001344:	f7fe ff02 	bl	800014c <strlen>
 8001348:	182a      	adds	r2, r5, r0
 800134a:	4620      	mov	r0, r4
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	4629      	mov	r1, r5
 8001352:	f7ff ffcb 	bl	80012ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8001356:	4620      	mov	r0, r4
 8001358:	bd38      	pop	{r3, r4, r5, pc}
 800135a:	f04f 32ff 	mov.w	r2, #4294967295
 800135e:	e7f4      	b.n	800134a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08001360 <_ZSt19__throw_logic_errorPKc>:
 8001360:	b508      	push	{r3, lr}
 8001362:	f000 f967 	bl	8001634 <abort>

08001366 <_ZSt20__throw_length_errorPKc>:
 8001366:	b508      	push	{r3, lr}
 8001368:	f000 f964 	bl	8001634 <abort>

0800136c <_ZdlPv>:
 800136c:	f000 b996 	b.w	800169c <free>

08001370 <_Znwj>:
 8001370:	b510      	push	{r4, lr}
 8001372:	2800      	cmp	r0, #0
 8001374:	bf14      	ite	ne
 8001376:	4604      	movne	r4, r0
 8001378:	2401      	moveq	r4, #1
 800137a:	4620      	mov	r0, r4
 800137c:	f000 f986 	bl	800168c <malloc>
 8001380:	b930      	cbnz	r0, 8001390 <_Znwj+0x20>
 8001382:	f000 f807 	bl	8001394 <_ZSt15get_new_handlerv>
 8001386:	b908      	cbnz	r0, 800138c <_Znwj+0x1c>
 8001388:	f000 f954 	bl	8001634 <abort>
 800138c:	4780      	blx	r0
 800138e:	e7f4      	b.n	800137a <_Znwj+0xa>
 8001390:	bd10      	pop	{r4, pc}
	...

08001394 <_ZSt15get_new_handlerv>:
 8001394:	4b02      	ldr	r3, [pc, #8]	; (80013a0 <_ZSt15get_new_handlerv+0xc>)
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	f3bf 8f5b 	dmb	ish
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	200000b8 	.word	0x200000b8

080013a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	07d0      	lsls	r0, r2, #31
 80013aa:	bf5c      	itt	pl
 80013ac:	2201      	movpl	r2, #1
 80013ae:	601a      	strpl	r2, [r3, #0]
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	07d1      	lsls	r1, r2, #31
 80013b6:	bf5c      	itt	pl
 80013b8:	2201      	movpl	r2, #1
 80013ba:	601a      	strpl	r2, [r3, #0]
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	07d2      	lsls	r2, r2, #31
 80013c2:	bf5c      	itt	pl
 80013c4:	2201      	movpl	r2, #1
 80013c6:	601a      	strpl	r2, [r3, #0]
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	07d0      	lsls	r0, r2, #31
 80013ce:	bf5c      	itt	pl
 80013d0:	2201      	movpl	r2, #1
 80013d2:	601a      	strpl	r2, [r3, #0]
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	07d1      	lsls	r1, r2, #31
 80013da:	bf5c      	itt	pl
 80013dc:	2201      	movpl	r2, #1
 80013de:	601a      	strpl	r2, [r3, #0]
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	07d2      	lsls	r2, r2, #31
 80013e6:	bf5c      	itt	pl
 80013e8:	2201      	movpl	r2, #1
 80013ea:	601a      	strpl	r2, [r3, #0]
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	07d0      	lsls	r0, r2, #31
 80013f2:	bf5c      	itt	pl
 80013f4:	2201      	movpl	r2, #1
 80013f6:	601a      	strpl	r2, [r3, #0]
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	07d1      	lsls	r1, r2, #31
 80013fe:	bf5c      	itt	pl
 8001400:	2201      	movpl	r2, #1
 8001402:	601a      	strpl	r2, [r3, #0]
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	07d2      	lsls	r2, r2, #31
 800140a:	bf5c      	itt	pl
 800140c:	2201      	movpl	r2, #1
 800140e:	601a      	strpl	r2, [r3, #0]
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	07d0      	lsls	r0, r2, #31
 8001416:	bf5c      	itt	pl
 8001418:	2201      	movpl	r2, #1
 800141a:	601a      	strpl	r2, [r3, #0]
 800141c:	4b10      	ldr	r3, [pc, #64]	; (8001460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	07d1      	lsls	r1, r2, #31
 8001422:	bf5c      	itt	pl
 8001424:	2201      	movpl	r2, #1
 8001426:	601a      	strpl	r2, [r3, #0]
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	07d2      	lsls	r2, r2, #31
 800142e:	bf5c      	itt	pl
 8001430:	2201      	movpl	r2, #1
 8001432:	601a      	strpl	r2, [r3, #0]
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	200000e8 	.word	0x200000e8
 800143c:	200000e4 	.word	0x200000e4
 8001440:	200000e0 	.word	0x200000e0
 8001444:	200000dc 	.word	0x200000dc
 8001448:	200000d8 	.word	0x200000d8
 800144c:	200000d4 	.word	0x200000d4
 8001450:	200000d0 	.word	0x200000d0
 8001454:	200000cc 	.word	0x200000cc
 8001458:	200000c8 	.word	0x200000c8
 800145c:	200000c4 	.word	0x200000c4
 8001460:	200000c0 	.word	0x200000c0
 8001464:	200000bc 	.word	0x200000bc

08001468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	07d1      	lsls	r1, r2, #31
 800146e:	bf5c      	itt	pl
 8001470:	2201      	movpl	r2, #1
 8001472:	601a      	strpl	r2, [r3, #0]
 8001474:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	07d2      	lsls	r2, r2, #31
 800147a:	bf5c      	itt	pl
 800147c:	2201      	movpl	r2, #1
 800147e:	601a      	strpl	r2, [r3, #0]
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	07d0      	lsls	r0, r2, #31
 8001486:	bf5c      	itt	pl
 8001488:	2201      	movpl	r2, #1
 800148a:	601a      	strpl	r2, [r3, #0]
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	07d1      	lsls	r1, r2, #31
 8001492:	bf5c      	itt	pl
 8001494:	2201      	movpl	r2, #1
 8001496:	601a      	strpl	r2, [r3, #0]
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	07d2      	lsls	r2, r2, #31
 800149e:	bf5c      	itt	pl
 80014a0:	2201      	movpl	r2, #1
 80014a2:	601a      	strpl	r2, [r3, #0]
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	07d0      	lsls	r0, r2, #31
 80014aa:	bf5c      	itt	pl
 80014ac:	2201      	movpl	r2, #1
 80014ae:	601a      	strpl	r2, [r3, #0]
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	07d1      	lsls	r1, r2, #31
 80014b6:	bf5c      	itt	pl
 80014b8:	2201      	movpl	r2, #1
 80014ba:	601a      	strpl	r2, [r3, #0]
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	07d2      	lsls	r2, r2, #31
 80014c2:	bf5c      	itt	pl
 80014c4:	2201      	movpl	r2, #1
 80014c6:	601a      	strpl	r2, [r3, #0]
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000108 	.word	0x20000108
 80014d0:	20000104 	.word	0x20000104
 80014d4:	20000100 	.word	0x20000100
 80014d8:	200000fc 	.word	0x200000fc
 80014dc:	200000f8 	.word	0x200000f8
 80014e0:	200000f4 	.word	0x200000f4
 80014e4:	200000f0 	.word	0x200000f0
 80014e8:	200000ec 	.word	0x200000ec

080014ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	07d0      	lsls	r0, r2, #31
 80014f2:	bf5c      	itt	pl
 80014f4:	2201      	movpl	r2, #1
 80014f6:	601a      	strpl	r2, [r3, #0]
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	07d1      	lsls	r1, r2, #31
 80014fe:	bf5c      	itt	pl
 8001500:	2201      	movpl	r2, #1
 8001502:	601a      	strpl	r2, [r3, #0]
 8001504:	4b20      	ldr	r3, [pc, #128]	; (8001588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	07d2      	lsls	r2, r2, #31
 800150a:	bf5c      	itt	pl
 800150c:	2201      	movpl	r2, #1
 800150e:	601a      	strpl	r2, [r3, #0]
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	07d0      	lsls	r0, r2, #31
 8001516:	bf5c      	itt	pl
 8001518:	2201      	movpl	r2, #1
 800151a:	601a      	strpl	r2, [r3, #0]
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	07d1      	lsls	r1, r2, #31
 8001522:	bf5c      	itt	pl
 8001524:	2201      	movpl	r2, #1
 8001526:	601a      	strpl	r2, [r3, #0]
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	07d2      	lsls	r2, r2, #31
 800152e:	bf5c      	itt	pl
 8001530:	2201      	movpl	r2, #1
 8001532:	601a      	strpl	r2, [r3, #0]
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	07d0      	lsls	r0, r2, #31
 800153a:	bf5c      	itt	pl
 800153c:	2201      	movpl	r2, #1
 800153e:	601a      	strpl	r2, [r3, #0]
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	07d1      	lsls	r1, r2, #31
 8001546:	bf5c      	itt	pl
 8001548:	2201      	movpl	r2, #1
 800154a:	601a      	strpl	r2, [r3, #0]
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	07d2      	lsls	r2, r2, #31
 8001552:	bf5c      	itt	pl
 8001554:	2201      	movpl	r2, #1
 8001556:	601a      	strpl	r2, [r3, #0]
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	07d0      	lsls	r0, r2, #31
 800155e:	bf5c      	itt	pl
 8001560:	2201      	movpl	r2, #1
 8001562:	601a      	strpl	r2, [r3, #0]
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	07d1      	lsls	r1, r2, #31
 800156a:	bf5c      	itt	pl
 800156c:	2201      	movpl	r2, #1
 800156e:	601a      	strpl	r2, [r3, #0]
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	07d2      	lsls	r2, r2, #31
 8001576:	bf5c      	itt	pl
 8001578:	2201      	movpl	r2, #1
 800157a:	601a      	strpl	r2, [r3, #0]
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000138 	.word	0x20000138
 8001584:	20000134 	.word	0x20000134
 8001588:	20000130 	.word	0x20000130
 800158c:	2000012c 	.word	0x2000012c
 8001590:	20000128 	.word	0x20000128
 8001594:	20000124 	.word	0x20000124
 8001598:	20000120 	.word	0x20000120
 800159c:	2000011c 	.word	0x2000011c
 80015a0:	20000118 	.word	0x20000118
 80015a4:	20000114 	.word	0x20000114
 80015a8:	20000110 	.word	0x20000110
 80015ac:	2000010c 	.word	0x2000010c

080015b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	07d1      	lsls	r1, r2, #31
 80015b6:	bf5c      	itt	pl
 80015b8:	2201      	movpl	r2, #1
 80015ba:	601a      	strpl	r2, [r3, #0]
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	07d2      	lsls	r2, r2, #31
 80015c2:	bf5c      	itt	pl
 80015c4:	2201      	movpl	r2, #1
 80015c6:	601a      	strpl	r2, [r3, #0]
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	07d0      	lsls	r0, r2, #31
 80015ce:	bf5c      	itt	pl
 80015d0:	2201      	movpl	r2, #1
 80015d2:	601a      	strpl	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	07d1      	lsls	r1, r2, #31
 80015da:	bf5c      	itt	pl
 80015dc:	2201      	movpl	r2, #1
 80015de:	601a      	strpl	r2, [r3, #0]
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	07d2      	lsls	r2, r2, #31
 80015e6:	bf5c      	itt	pl
 80015e8:	2201      	movpl	r2, #1
 80015ea:	601a      	strpl	r2, [r3, #0]
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	07d0      	lsls	r0, r2, #31
 80015f2:	bf5c      	itt	pl
 80015f4:	2201      	movpl	r2, #1
 80015f6:	601a      	strpl	r2, [r3, #0]
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	07d1      	lsls	r1, r2, #31
 80015fe:	bf5c      	itt	pl
 8001600:	2201      	movpl	r2, #1
 8001602:	601a      	strpl	r2, [r3, #0]
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	07d2      	lsls	r2, r2, #31
 800160a:	bf5c      	itt	pl
 800160c:	2201      	movpl	r2, #1
 800160e:	601a      	strpl	r2, [r3, #0]
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000158 	.word	0x20000158
 8001618:	20000154 	.word	0x20000154
 800161c:	20000150 	.word	0x20000150
 8001620:	2000014c 	.word	0x2000014c
 8001624:	20000148 	.word	0x20000148
 8001628:	20000144 	.word	0x20000144
 800162c:	20000140 	.word	0x20000140
 8001630:	2000013c 	.word	0x2000013c

08001634 <abort>:
 8001634:	b508      	push	{r3, lr}
 8001636:	2006      	movs	r0, #6
 8001638:	f000 f926 	bl	8001888 <raise>
 800163c:	2001      	movs	r0, #1
 800163e:	f000 f95f 	bl	8001900 <_exit>
	...

08001644 <__libc_init_array>:
 8001644:	b570      	push	{r4, r5, r6, lr}
 8001646:	2500      	movs	r5, #0
 8001648:	4e0c      	ldr	r6, [pc, #48]	; (800167c <__libc_init_array+0x38>)
 800164a:	4c0d      	ldr	r4, [pc, #52]	; (8001680 <__libc_init_array+0x3c>)
 800164c:	1ba4      	subs	r4, r4, r6
 800164e:	10a4      	asrs	r4, r4, #2
 8001650:	42a5      	cmp	r5, r4
 8001652:	d109      	bne.n	8001668 <__libc_init_array+0x24>
 8001654:	f000 f956 	bl	8001904 <_init>
 8001658:	2500      	movs	r5, #0
 800165a:	4e0a      	ldr	r6, [pc, #40]	; (8001684 <__libc_init_array+0x40>)
 800165c:	4c0a      	ldr	r4, [pc, #40]	; (8001688 <__libc_init_array+0x44>)
 800165e:	1ba4      	subs	r4, r4, r6
 8001660:	10a4      	asrs	r4, r4, #2
 8001662:	42a5      	cmp	r5, r4
 8001664:	d105      	bne.n	8001672 <__libc_init_array+0x2e>
 8001666:	bd70      	pop	{r4, r5, r6, pc}
 8001668:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800166c:	4798      	blx	r3
 800166e:	3501      	adds	r5, #1
 8001670:	e7ee      	b.n	8001650 <__libc_init_array+0xc>
 8001672:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001676:	4798      	blx	r3
 8001678:	3501      	adds	r5, #1
 800167a:	e7f2      	b.n	8001662 <__libc_init_array+0x1e>
 800167c:	080019c4 	.word	0x080019c4
 8001680:	080019c4 	.word	0x080019c4
 8001684:	080019c4 	.word	0x080019c4
 8001688:	080019d8 	.word	0x080019d8

0800168c <malloc>:
 800168c:	4b02      	ldr	r3, [pc, #8]	; (8001698 <malloc+0xc>)
 800168e:	4601      	mov	r1, r0
 8001690:	6818      	ldr	r0, [r3, #0]
 8001692:	f000 b863 	b.w	800175c <_malloc_r>
 8001696:	bf00      	nop
 8001698:	2000001c 	.word	0x2000001c

0800169c <free>:
 800169c:	4b02      	ldr	r3, [pc, #8]	; (80016a8 <free+0xc>)
 800169e:	4601      	mov	r1, r0
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	f000 b80f 	b.w	80016c4 <_free_r>
 80016a6:	bf00      	nop
 80016a8:	2000001c 	.word	0x2000001c

080016ac <memcpy>:
 80016ac:	b510      	push	{r4, lr}
 80016ae:	1e43      	subs	r3, r0, #1
 80016b0:	440a      	add	r2, r1
 80016b2:	4291      	cmp	r1, r2
 80016b4:	d100      	bne.n	80016b8 <memcpy+0xc>
 80016b6:	bd10      	pop	{r4, pc}
 80016b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80016bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80016c0:	e7f7      	b.n	80016b2 <memcpy+0x6>
	...

080016c4 <_free_r>:
 80016c4:	b538      	push	{r3, r4, r5, lr}
 80016c6:	4605      	mov	r5, r0
 80016c8:	2900      	cmp	r1, #0
 80016ca:	d043      	beq.n	8001754 <_free_r+0x90>
 80016cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016d0:	1f0c      	subs	r4, r1, #4
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	bfb8      	it	lt
 80016d6:	18e4      	addlt	r4, r4, r3
 80016d8:	f000 f8f2 	bl	80018c0 <__malloc_lock>
 80016dc:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <_free_r+0x94>)
 80016de:	6813      	ldr	r3, [r2, #0]
 80016e0:	4610      	mov	r0, r2
 80016e2:	b933      	cbnz	r3, 80016f2 <_free_r+0x2e>
 80016e4:	6063      	str	r3, [r4, #4]
 80016e6:	6014      	str	r4, [r2, #0]
 80016e8:	4628      	mov	r0, r5
 80016ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016ee:	f000 b8e8 	b.w	80018c2 <__malloc_unlock>
 80016f2:	42a3      	cmp	r3, r4
 80016f4:	d90b      	bls.n	800170e <_free_r+0x4a>
 80016f6:	6821      	ldr	r1, [r4, #0]
 80016f8:	1862      	adds	r2, r4, r1
 80016fa:	4293      	cmp	r3, r2
 80016fc:	bf01      	itttt	eq
 80016fe:	681a      	ldreq	r2, [r3, #0]
 8001700:	685b      	ldreq	r3, [r3, #4]
 8001702:	1852      	addeq	r2, r2, r1
 8001704:	6022      	streq	r2, [r4, #0]
 8001706:	6063      	str	r3, [r4, #4]
 8001708:	6004      	str	r4, [r0, #0]
 800170a:	e7ed      	b.n	80016e8 <_free_r+0x24>
 800170c:	4613      	mov	r3, r2
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	b10a      	cbz	r2, 8001716 <_free_r+0x52>
 8001712:	42a2      	cmp	r2, r4
 8001714:	d9fa      	bls.n	800170c <_free_r+0x48>
 8001716:	6819      	ldr	r1, [r3, #0]
 8001718:	1858      	adds	r0, r3, r1
 800171a:	42a0      	cmp	r0, r4
 800171c:	d10b      	bne.n	8001736 <_free_r+0x72>
 800171e:	6820      	ldr	r0, [r4, #0]
 8001720:	4401      	add	r1, r0
 8001722:	1858      	adds	r0, r3, r1
 8001724:	4282      	cmp	r2, r0
 8001726:	6019      	str	r1, [r3, #0]
 8001728:	d1de      	bne.n	80016e8 <_free_r+0x24>
 800172a:	6810      	ldr	r0, [r2, #0]
 800172c:	6852      	ldr	r2, [r2, #4]
 800172e:	4401      	add	r1, r0
 8001730:	6019      	str	r1, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	e7d8      	b.n	80016e8 <_free_r+0x24>
 8001736:	d902      	bls.n	800173e <_free_r+0x7a>
 8001738:	230c      	movs	r3, #12
 800173a:	602b      	str	r3, [r5, #0]
 800173c:	e7d4      	b.n	80016e8 <_free_r+0x24>
 800173e:	6820      	ldr	r0, [r4, #0]
 8001740:	1821      	adds	r1, r4, r0
 8001742:	428a      	cmp	r2, r1
 8001744:	bf01      	itttt	eq
 8001746:	6811      	ldreq	r1, [r2, #0]
 8001748:	6852      	ldreq	r2, [r2, #4]
 800174a:	1809      	addeq	r1, r1, r0
 800174c:	6021      	streq	r1, [r4, #0]
 800174e:	6062      	str	r2, [r4, #4]
 8001750:	605c      	str	r4, [r3, #4]
 8001752:	e7c9      	b.n	80016e8 <_free_r+0x24>
 8001754:	bd38      	pop	{r3, r4, r5, pc}
 8001756:	bf00      	nop
 8001758:	2000015c 	.word	0x2000015c

0800175c <_malloc_r>:
 800175c:	b570      	push	{r4, r5, r6, lr}
 800175e:	1ccd      	adds	r5, r1, #3
 8001760:	f025 0503 	bic.w	r5, r5, #3
 8001764:	3508      	adds	r5, #8
 8001766:	2d0c      	cmp	r5, #12
 8001768:	bf38      	it	cc
 800176a:	250c      	movcc	r5, #12
 800176c:	2d00      	cmp	r5, #0
 800176e:	4606      	mov	r6, r0
 8001770:	db01      	blt.n	8001776 <_malloc_r+0x1a>
 8001772:	42a9      	cmp	r1, r5
 8001774:	d903      	bls.n	800177e <_malloc_r+0x22>
 8001776:	230c      	movs	r3, #12
 8001778:	6033      	str	r3, [r6, #0]
 800177a:	2000      	movs	r0, #0
 800177c:	bd70      	pop	{r4, r5, r6, pc}
 800177e:	f000 f89f 	bl	80018c0 <__malloc_lock>
 8001782:	4a23      	ldr	r2, [pc, #140]	; (8001810 <_malloc_r+0xb4>)
 8001784:	6814      	ldr	r4, [r2, #0]
 8001786:	4621      	mov	r1, r4
 8001788:	b991      	cbnz	r1, 80017b0 <_malloc_r+0x54>
 800178a:	4c22      	ldr	r4, [pc, #136]	; (8001814 <_malloc_r+0xb8>)
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	b91b      	cbnz	r3, 8001798 <_malloc_r+0x3c>
 8001790:	4630      	mov	r0, r6
 8001792:	f000 f841 	bl	8001818 <_sbrk_r>
 8001796:	6020      	str	r0, [r4, #0]
 8001798:	4629      	mov	r1, r5
 800179a:	4630      	mov	r0, r6
 800179c:	f000 f83c 	bl	8001818 <_sbrk_r>
 80017a0:	1c43      	adds	r3, r0, #1
 80017a2:	d126      	bne.n	80017f2 <_malloc_r+0x96>
 80017a4:	230c      	movs	r3, #12
 80017a6:	4630      	mov	r0, r6
 80017a8:	6033      	str	r3, [r6, #0]
 80017aa:	f000 f88a 	bl	80018c2 <__malloc_unlock>
 80017ae:	e7e4      	b.n	800177a <_malloc_r+0x1e>
 80017b0:	680b      	ldr	r3, [r1, #0]
 80017b2:	1b5b      	subs	r3, r3, r5
 80017b4:	d41a      	bmi.n	80017ec <_malloc_r+0x90>
 80017b6:	2b0b      	cmp	r3, #11
 80017b8:	d90f      	bls.n	80017da <_malloc_r+0x7e>
 80017ba:	600b      	str	r3, [r1, #0]
 80017bc:	18cc      	adds	r4, r1, r3
 80017be:	50cd      	str	r5, [r1, r3]
 80017c0:	4630      	mov	r0, r6
 80017c2:	f000 f87e 	bl	80018c2 <__malloc_unlock>
 80017c6:	f104 000b 	add.w	r0, r4, #11
 80017ca:	1d23      	adds	r3, r4, #4
 80017cc:	f020 0007 	bic.w	r0, r0, #7
 80017d0:	1ac3      	subs	r3, r0, r3
 80017d2:	d01b      	beq.n	800180c <_malloc_r+0xb0>
 80017d4:	425a      	negs	r2, r3
 80017d6:	50e2      	str	r2, [r4, r3]
 80017d8:	bd70      	pop	{r4, r5, r6, pc}
 80017da:	428c      	cmp	r4, r1
 80017dc:	bf0b      	itete	eq
 80017de:	6863      	ldreq	r3, [r4, #4]
 80017e0:	684b      	ldrne	r3, [r1, #4]
 80017e2:	6013      	streq	r3, [r2, #0]
 80017e4:	6063      	strne	r3, [r4, #4]
 80017e6:	bf18      	it	ne
 80017e8:	460c      	movne	r4, r1
 80017ea:	e7e9      	b.n	80017c0 <_malloc_r+0x64>
 80017ec:	460c      	mov	r4, r1
 80017ee:	6849      	ldr	r1, [r1, #4]
 80017f0:	e7ca      	b.n	8001788 <_malloc_r+0x2c>
 80017f2:	1cc4      	adds	r4, r0, #3
 80017f4:	f024 0403 	bic.w	r4, r4, #3
 80017f8:	42a0      	cmp	r0, r4
 80017fa:	d005      	beq.n	8001808 <_malloc_r+0xac>
 80017fc:	1a21      	subs	r1, r4, r0
 80017fe:	4630      	mov	r0, r6
 8001800:	f000 f80a 	bl	8001818 <_sbrk_r>
 8001804:	3001      	adds	r0, #1
 8001806:	d0cd      	beq.n	80017a4 <_malloc_r+0x48>
 8001808:	6025      	str	r5, [r4, #0]
 800180a:	e7d9      	b.n	80017c0 <_malloc_r+0x64>
 800180c:	bd70      	pop	{r4, r5, r6, pc}
 800180e:	bf00      	nop
 8001810:	2000015c 	.word	0x2000015c
 8001814:	20000160 	.word	0x20000160

08001818 <_sbrk_r>:
 8001818:	b538      	push	{r3, r4, r5, lr}
 800181a:	2300      	movs	r3, #0
 800181c:	4c05      	ldr	r4, [pc, #20]	; (8001834 <_sbrk_r+0x1c>)
 800181e:	4605      	mov	r5, r0
 8001820:	4608      	mov	r0, r1
 8001822:	6023      	str	r3, [r4, #0]
 8001824:	f000 f85e 	bl	80018e4 <_sbrk>
 8001828:	1c43      	adds	r3, r0, #1
 800182a:	d102      	bne.n	8001832 <_sbrk_r+0x1a>
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	b103      	cbz	r3, 8001832 <_sbrk_r+0x1a>
 8001830:	602b      	str	r3, [r5, #0]
 8001832:	bd38      	pop	{r3, r4, r5, pc}
 8001834:	20000168 	.word	0x20000168

08001838 <_raise_r>:
 8001838:	291f      	cmp	r1, #31
 800183a:	b538      	push	{r3, r4, r5, lr}
 800183c:	4604      	mov	r4, r0
 800183e:	460d      	mov	r5, r1
 8001840:	d904      	bls.n	800184c <_raise_r+0x14>
 8001842:	2316      	movs	r3, #22
 8001844:	6003      	str	r3, [r0, #0]
 8001846:	f04f 30ff 	mov.w	r0, #4294967295
 800184a:	bd38      	pop	{r3, r4, r5, pc}
 800184c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800184e:	b112      	cbz	r2, 8001856 <_raise_r+0x1e>
 8001850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001854:	b94b      	cbnz	r3, 800186a <_raise_r+0x32>
 8001856:	4620      	mov	r0, r4
 8001858:	f000 f830 	bl	80018bc <_getpid_r>
 800185c:	462a      	mov	r2, r5
 800185e:	4601      	mov	r1, r0
 8001860:	4620      	mov	r0, r4
 8001862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001866:	f000 b817 	b.w	8001898 <_kill_r>
 800186a:	2b01      	cmp	r3, #1
 800186c:	d00a      	beq.n	8001884 <_raise_r+0x4c>
 800186e:	1c59      	adds	r1, r3, #1
 8001870:	d103      	bne.n	800187a <_raise_r+0x42>
 8001872:	2316      	movs	r3, #22
 8001874:	6003      	str	r3, [r0, #0]
 8001876:	2001      	movs	r0, #1
 8001878:	bd38      	pop	{r3, r4, r5, pc}
 800187a:	2400      	movs	r4, #0
 800187c:	4628      	mov	r0, r5
 800187e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001882:	4798      	blx	r3
 8001884:	2000      	movs	r0, #0
 8001886:	bd38      	pop	{r3, r4, r5, pc}

08001888 <raise>:
 8001888:	4b02      	ldr	r3, [pc, #8]	; (8001894 <raise+0xc>)
 800188a:	4601      	mov	r1, r0
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	f7ff bfd3 	b.w	8001838 <_raise_r>
 8001892:	bf00      	nop
 8001894:	2000001c 	.word	0x2000001c

08001898 <_kill_r>:
 8001898:	b538      	push	{r3, r4, r5, lr}
 800189a:	2300      	movs	r3, #0
 800189c:	4c06      	ldr	r4, [pc, #24]	; (80018b8 <_kill_r+0x20>)
 800189e:	4605      	mov	r5, r0
 80018a0:	4608      	mov	r0, r1
 80018a2:	4611      	mov	r1, r2
 80018a4:	6023      	str	r3, [r4, #0]
 80018a6:	f000 f815 	bl	80018d4 <_kill>
 80018aa:	1c43      	adds	r3, r0, #1
 80018ac:	d102      	bne.n	80018b4 <_kill_r+0x1c>
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	b103      	cbz	r3, 80018b4 <_kill_r+0x1c>
 80018b2:	602b      	str	r3, [r5, #0]
 80018b4:	bd38      	pop	{r3, r4, r5, pc}
 80018b6:	bf00      	nop
 80018b8:	20000168 	.word	0x20000168

080018bc <_getpid_r>:
 80018bc:	f000 b802 	b.w	80018c4 <_getpid>

080018c0 <__malloc_lock>:
 80018c0:	4770      	bx	lr

080018c2 <__malloc_unlock>:
 80018c2:	4770      	bx	lr

080018c4 <_getpid>:
 80018c4:	2258      	movs	r2, #88	; 0x58
 80018c6:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <_getpid+0xc>)
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	4770      	bx	lr
 80018d0:	20000168 	.word	0x20000168

080018d4 <_kill>:
 80018d4:	2258      	movs	r2, #88	; 0x58
 80018d6:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <_kill+0xc>)
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	4770      	bx	lr
 80018e0:	20000168 	.word	0x20000168

080018e4 <_sbrk>:
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <_sbrk+0x14>)
 80018e6:	4602      	mov	r2, r0
 80018e8:	6819      	ldr	r1, [r3, #0]
 80018ea:	b909      	cbnz	r1, 80018f0 <_sbrk+0xc>
 80018ec:	4903      	ldr	r1, [pc, #12]	; (80018fc <_sbrk+0x18>)
 80018ee:	6019      	str	r1, [r3, #0]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	4402      	add	r2, r0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	4770      	bx	lr
 80018f8:	20000164 	.word	0x20000164
 80018fc:	2000016c 	.word	0x2000016c

08001900 <_exit>:
 8001900:	e7fe      	b.n	8001900 <_exit>
	...

08001904 <_init>:
 8001904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001906:	bf00      	nop
 8001908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190a:	bc08      	pop	{r3}
 800190c:	469e      	mov	lr, r3
 800190e:	4770      	bx	lr

08001910 <_fini>:
 8001910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001912:	bf00      	nop
 8001914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001916:	bc08      	pop	{r3}
 8001918:	469e      	mov	lr, r3
 800191a:	4770      	bx	lr
